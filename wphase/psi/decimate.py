import numpy as np
from scipy.signal import lfilter



#Filter coefficients:
filt_coef_20_2 = [np.array([ 0.00156486432352862382504088412105147654074244201183319091796875,
                             0.007639494248038190826743942807297571562230587005615234375     ,
                             0.0226050064083221091681963343944516964256763458251953125       ,
                             0.047901582297825019696180248729433515109121799468994140625     ,
                             0.07916404795687703721540628976072184741497039794921875         ,
                             0.10573772407800115236131688334353384561836719512939453125      ,
                             0.11624692923848033154765602148472680710256099700927734375      ,
                             0.10573772407800142991707303963266895152628421783447265625      ,
                             0.0791640479568769261931038272450678050518035888671875          ,
                             0.047901582297825005818392440914976759813725948333740234375     ,
                             0.02260500640832212304598414220890845172107219696044921875      ,
                             0.007639494248038193428829156772508213180117309093475341796875  ,
                             0.00156486432352862382504088412105147654074244201183319091796875]),
                  np.array([ 1.0000000000000000000000000000000000000000000000000000000000000000e+00,
                            -2.4434792135755261099916424427647143602371215820312500000000000000e+00,
                             4.4026336033993551666299026692286133766174316406250000000000000000e+00,
                            -4.9533890574096997028163968934677541255950927734375000000000000000e+00,
                             4.4513072580525108179472226765938103199005126953125000000000000000e+00,
                            -2.9038436241465226395064291864400729537010192871093750000000000000e+00,
                             1.5405456683311500309940811348496936261653900146484375000000000000e+00,
                            -6.0252652082761259944021503542899154126644134521484375000000000000e-01,
                             1.8920423619668602643884014469222165644168853759765625000000000000e-01,
                            -4.1208381013104894430298941188084427267313003540039062500000000000e-02,
                             6.8183119251639884642046673945969814667478203773498535156250000000e-03,
                            -6.2263231317487917511332984332739215460605919361114501953125000000e-04,
                             3.2719244101719417966000341690957498030911665409803390502929687500e-05])]

filt_coef_10_10 =[np.array([ 2.2392551459584304410352015302088091175392037257552146911621093750e-05,
                            -1.8897310079412393715551921058448670009966008365154266357421875000e-04,
                             7.5468348084554060135886732751941963215358555316925048828125000000e-04,
                            -1.9034499444519521749175083868976798839867115020751953125000000000e-03,
                             3.4294061788347311725555499606343801133334636688232421875000000000e-03,
                            -4.7429051644625281822231777084653003839775919914245605468750000000e-03,
                             5.2577048958763316494069428586044523399323225021362304687500000000e-03,
                            -4.7429051644625333863936056388865836197510361671447753906250000000e-03,
                             3.4294061788347303051938119722308329073712229728698730468750000000e-03,
                            -1.9034499444519521749175083868976798839867115020751953125000000000e-03,
                             7.5468348084554125188017081882208003662526607513427734375000000000e-04,
                            -1.8897310079412393715551921058448670009966008365154266357421875000e-04,
                             2.2392551459584304410352015302088091175392037257552146911621093750e-05]),
                 np.array([  1.0000000000000000000000000000000000000000000000000000000000000000e+00,
                            -1.0275039601461903870927017123904079198837280273437500000000000000e+01,
                             4.8499851590273117096785426838323473930358886718750000000000000000e+01,
                            -1.3904754013881643004424404352903366088867187500000000000000000000e+02,
                             2.6965067370808105806645471602678298950195312500000000000000000000e+02,
                            -3.7260905197026499990897718816995620727539062500000000000000000000e+02,
                             3.7616271531865550059592351317405700683593750000000000000000000000e+02,
                            -2.7952327111819266747261281125247478485107421875000000000000000000e+02,
                             1.5173032369385947504270006902515888214111328125000000000000000000e+02,
                            -5.8670995986792490839434321969747543334960937500000000000000000000e+01,
                             1.5339563832744090632331790402531623840332031250000000000000000000e+01,
                            -2.4346152753829848336408758768811821937561035156250000000000000000e+00,
                             1.7738596019653138369243094984994968399405479431152343750000000000e-01])]

filt_coef_40_4 = [np.array([ 0.0001038174004248418292543215679657464534102473407983779907226562,
                            -0.0002946628439377227165647810114279536719550378620624542236328125,
                             0.000608889930399915684129663606682925092172808945178985595703125 ,
                            -0.000735295858118252304742867853093457597424276173114776611328125 ,
                             0.00078151630323324418163355442601414324599318206310272216796875  ,
                            -0.000588956240029735417045031464766680073807947337627410888671875 ,
                             0.000594150610241333154877552136241547486861236393451690673828125 ,
                            -0.00058895624002974745168914605386589755653403699398040771484375  ,
                             0.0007815163032332335564522640680706899729557335376739501953125   ,
                            -0.000735295858118253822625909332799665207858197391033172607421875 ,
                             0.00060888993039991579254988085523336849291808903217315673828125  ,
                            -0.0002946628439377227165647810114279536719550378620624542236328125,
                             0.0001038174004248418292543215679657464534102473407983779907226562]),
                  np.array([ 1.0000000000000000000000000000000000000000000000000000000000000000e+00,
                            -7.5707506816499838819822798541281372308731079101562500000000000000e+00,
                             2.6864193287881175109532705391757190227508544921875000000000000000e+01,
                            -5.8879513393013120037267071893438696861267089843750000000000000000e+01,
                             8.8564708610680142442106443922966718673706054687500000000000000000e+01,
                            -9.6140382067156409107155923265963792800903320312500000000000000000e+01,
                             7.7118889964825598326569888740777969360351562500000000000000000000e+01,
                            -4.6003495375185842419796244939789175987243652343750000000000000000e+01,
                             2.0234215259072943382534504053182899951934814453125000000000000000e+01,
                            -6.3942841247456305708851687086280435323715209960937500000000000000e+00,
                             1.3770763850483784818123922377708368003368377685546875000000000000e+00,
                            -1.8135143746071433201727529649360803887248039245605468750000000000e-01,
                             1.1038339697551460480418050735806900775060057640075683593750000000e-02])]


filt_coef_50_5 = [np.array([ 6.1745085908969892093609010963461969367926940321922302246093750000e-05,
                            -2.8403124657668253920037026993838935595704242587089538574218750000e-04,
                             6.9940149108186949918064545528295639087446033954620361328125000000e-04,
                            -1.1217016097124841815524387556024521472863852977752685546875000000e-03,
                             1.3456353249381293284148153333035224932245910167694091796875000000e-03,
                            -1.3353336190241947133844346851105910900514572858810424804687500000e-03,
                             1.2992223322126532705778068077506759436801075935363769531250000000e-03,
                            -1.3353336190242025196400765807425159437116235494613647460937500000e-03,
                             1.3456353249381228232017804202769184485077857971191406250000000000e-03,
                            -1.1217016097124852657546112411068861547391861677169799804687500000e-03,
                             6.9940149108186982444129720093428659311030060052871704101562500000e-04,
                            -2.8403124657668253920037026993838935595704242587089538574218750000e-04,
                             6.1745085908969892093609010963461969367926940321922302246093750000e-05]),
                  np.array([ 1.0000000000000000000000000000000000000000000000000000000000000000e+00,
                            -8.4867981302995580961123778251931071281433105468750000000000000000e+00,
                             3.3414163625098716181582858553156256675720214843750000000000000000e+01,
                            -8.0600204384975654647860210388898849487304687500000000000000000000e+01,
                             1.3252796848837186871605808846652507781982421875000000000000000000e+02,
                            -1.5635722546853432390889793168753385543823242187500000000000000000e+02,
                             1.3562965637774635752066387794911861419677734375000000000000000000e+02,
                            -8.7104290603562645856072776950895786285400390625000000000000000000e+01,
                             4.1083738526056137629893783014267683029174804687500000000000000000e+01,
                            -1.3872707818579673499925775104202330112457275390625000000000000000e+01,
                             3.1820501754404499905604097875766456127166748046875000000000000000e+00,
                            -4.4500575331337371975948258295829873532056808471679687500000000000e-01,
                             2.8685619736980475652510236272973997984081506729125976562500000000e-02])]



def fast_decimation(tr, factor, filt_coef):
    """
    Decimates a trace using a Chebychev filter as implemented :py:meth:`obspy.core.Trace.decimate`.
    This speeds up the decimation process as the filter is designed once (the coefficients are
    hard coded in this module). See :py:mod:`decimation_script` to understand how these coefficients
    were calculated.

    .. warning:: The phase shift of the filter employed can be non-linear outside of the
        Wphase frequency band and hence **THIS FILTER SHOULD BE USED WITH EXTREME CAUTION
        FOR PURPOSES OTHER THAN WPHASE INVERSIONS.**

    :param tr: The trace to decimate.
    :type tr: :py:class:`obspy.core.Trace`
    :param int factor: Decimation factor (e.g. to reduce from a sampling rate of
        40Hz to 10Hz one would specify a factor of 4).
    :param filt_coef: The coefficients for the filter.

    :param tr: The trace to decimate.
    :type tr: :py:class:`obspy.core.Trace`

    """

    b, a = filt_coef
    #60 sec dmean:
    mean = np.mean(tr[:int(60/tr.stats.delta)])
    tr.data = tr.data - mean
    tr.data = lfilter(b, a, tr.data)
    tr.data = tr[::factor]
    tr.stats.sampling_rate /= float(factor)
    return tr



def dec20to1(tr, fast=True):
    """
    Decimate *tr* from 20Hz to 1Hz. If *fast* is set to
    *True*, then the trace is decimated using :py:func:`fast_decimation`, otherwise two calls to
    :py:meth:`obspy.core.Trace.decimate` are made with factors of 2 and 10 respectively.

    :param tr: The trace to decimate.
    :type tr: :py:class:`obspy.core.Trace`

    :return: The decimated trace.
    :rtype: :py:class:`obspy.core.Trace`
    """

    if fast:
        tr = fast_decimation(tr, 2, filt_coef_20_2)
        tr = fast_decimation(tr, 10, filt_coef_10_10)
    else:
        tr.decimate(2).decimate(10)
    ts = -0.221 - 2.783
    tr.stats.starttime += ts
    return tr



def dec40to1(tr, fast=True):
    """
    Decimate *tr* from 40Hz to 1Hz. If *fast* is set to
    *True*, then the trace is decimated using :py:func:`fast_decimation`, otherwise two calls to
    :py:meth:`obspy.core.Trace.decimate` are made with factors of 4 and 10 respectively.

    :param tr: The trace to decimate.
    :type tr: :py:class:`obspy.core.Trace`

    :return: The decimated trace.
    :rtype: :py:class:`obspy.core.Trace`
    """

    if fast:
        tr = fast_decimation(tr, 4, filt_coef_40_4)
        tr = fast_decimation(tr, 10, filt_coef_10_10)
    else:
        tr.decimate(4).decimate(10)
    ts = -0.265 - 2.783
    tr.stats.starttime += ts
    return tr



def dec50to1(tr, fast=True):
    """
    Decimate *tr* from 50Hz to 1Hz. If *fast* is set to
    *True*, then the trace is decimated using :py:func:`fast_decimation`, otherwise two calls to
    :py:meth:`obspy.core.Trace.decimate` are made with factors of 5 and 10 respectively.

    :param tr: The trace to decimate.
    :type tr: :py:class:`obspy.core.Trace`

    :return: The decimated trace.
    :rtype: :py:class:`obspy.core.Trace`
    """

    if fast:
        tr = fast_decimation(tr, 5, filt_coef_50_5)
        tr = fast_decimation(tr, 10, filt_coef_10_10)
    else:
        tr.decimate(5).decimate(10)
    ts = -0.27 - 2.783
    tr.stats.starttime += ts
    return tr

def dec1to1(tr, fast=True):
    return tr

# Sampling rates we will decimate. Channels with other sampling rates will be ignored.
decimators = {
    1.:  dec1to1,
    20.: dec20to1,
    40.: dec40to1,
    50.: dec50to1,
}

class CannotDecimate(Exception):
    def __init__(self, samp_rate):
        self.args = [samp_rate]
    def __str__(self):
        return "non-decimable sampling rate of {}Hz".format(self.args[0])

def decimateTo1Hz(tr):
    samp_rate = tr.stats.sampling_rate
    try:
        return decimators[samp_rate](tr, True)
    except KeyError:
        raise CannotDecimate(samp_rate)
